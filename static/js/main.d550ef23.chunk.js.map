{"version":3,"sources":["types/ComplitedFilter.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["ComplitedFilter","TodoList","props","filteredTodos","selectedTodoId","setSelectedTodoId","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","complitedFilter","setComplitedFilter","searchQuery","setSearchQuery","onSubmit","event","preventDefault","value","onChange","target","All","Active","Completed","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","useState","selectedUser","setSelectedUser","isError","setIsError","useEffect","userId","catch","href","email","name","App","todos","setTodos","isLoading","setIsLoading","finally","useMemo","find","filteredTodosBySearchQuery","filter","prepTitle","toLowerCase","prepSearchQuery","includes","errorNoTodosFromServer","length","errorNoSuchTodosBySearchQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d550ef23.chunk.js","sourcesContent":["export enum ComplitedFilter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  filteredTodos: Todo[],\n  selectedTodoId: number | null,\n  setSelectedTodoId: (selectedTodoId: number | null) => void,\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const {\n    filteredTodos,\n    selectedTodoId,\n    setSelectedTodoId,\n  } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames('', {\n              'has-background-info-light': todo.id === selectedTodoId,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed\n              && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-success': todo.completed },\n                { 'has-text-danger': !todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodoId(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': todo.id !== selectedTodoId,\n                    'fa-eye-slash': todo.id === selectedTodoId,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC } from 'react';\nimport { ComplitedFilter } from '../../types/ComplitedFilter';\n\ninterface Props {\n  complitedFilter: ComplitedFilter,\n  setComplitedFilter: (complitedFilter: ComplitedFilter) => void,\n  searchQuery: string,\n  setSearchQuery: (query: string) => void,\n}\n\nexport const TodoFilter: FC<Props> = (props) => {\n  const {\n    complitedFilter,\n    setComplitedFilter,\n    searchQuery,\n    setSearchQuery,\n  } = props;\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={complitedFilter}\n            onChange={((event) => setComplitedFilter(\n              event.target.value as ComplitedFilter,\n            ))}\n          >\n            <option value={ComplitedFilter.All}>All</option>\n            <option value={ComplitedFilter.Active}>Active</option>\n            <option value={ComplitedFilter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => {\n            setSearchQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                setSearchQuery('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo,\n  setSelectedTodoId: (selectedTodoId: number | null) => void,\n}\n\nexport const TodoModal: FC<Props> = (props) => {\n  const { selectedTodo, setSelectedTodoId } = props;\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsError(false);\n\n    getUser(selectedTodo.userId)\n      .then(setSelectedUser)\n      .catch(() => setIsError(true));\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => {\n                  setSelectedTodoId(null);\n                }}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                {isError\n                  ? <div>User not found</div>\n                  : (\n                    <a href={`mailto:${selectedUser.email}`}>\n                      {selectedUser.name}\n                    </a>\n                  )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { ComplitedFilter } from './types/ComplitedFilter';\nimport './App.css';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [complitedFilter, setComplitedFilter] = useState<ComplitedFilter>(ComplitedFilter.All);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const selectedTodo = useMemo(() => (\n    todos.find(todo => todo.id === selectedTodoId) || null\n  ), [todos, selectedTodoId]);\n\n  const filteredTodosBySearchQuery = useMemo(() => (\n    todos.filter(todo => {\n      const prepTitle = todo.title.toLowerCase();\n      const prepSearchQuery = searchQuery.toLowerCase();\n\n      return prepTitle.includes(prepSearchQuery);\n    })), [todos]);\n\n  const filteredTodos = useMemo(() => {\n    return filteredTodosBySearchQuery.filter(todo => {\n      switch (complitedFilter) {\n        case ComplitedFilter.All:\n          return true;\n        case ComplitedFilter.Active:\n          return !todo.completed;\n        case ComplitedFilter.Completed:\n          return todo.completed;\n        default:\n          return true;\n      }\n    });\n  }, [complitedFilter, searchQuery, todos]);\n\n  const errorNoTodosFromServer = !isLoading && todos.length === 0 && !searchQuery;\n  const errorNoSuchTodosBySearchQuery = !isLoading && filteredTodos.length === 0 && searchQuery;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                complitedFilter={complitedFilter}\n                setComplitedFilter={setComplitedFilter}\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    filteredTodos={filteredTodos}\n                    selectedTodoId={selectedTodoId}\n                    setSelectedTodoId={setSelectedTodoId}\n                  />\n                )}\n\n              {errorNoTodosFromServer && (\n                <h1>No results found</h1>\n              )}\n\n              {errorNoSuchTodosBySearchQuery && (\n                <h1>{`No results found for \"${searchQuery}\" and filtered by \"${complitedFilter}\"`}</h1>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodoId={setSelectedTodoId}\n        />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}